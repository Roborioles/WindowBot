// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.




#include "PickupWheels.h"
#include "../Robotmap.h"
#include "../Commands/PickupWheelsTog.h"

PickupWheels::PickupWheels() : Subsystem("PickupWheels") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	spike1 = RobotMap::pickupWheelsSpike1;
	spike2 = RobotMap::pickupWheelsSpike2;
	topWheels = RobotMap::pickupWheelsTopWheels;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	limitSwitch1 = RobotMap::pickupWheelsLimitSwitch1;
	limitSwitch2 = RobotMap::pickupWheelsLimitSwitch2;
	limitSwitch3 = RobotMap::pickupWheelsLimitSwitch3;
	limitSwitch4 = RobotMap::pickupWheelsLimitSwitch4;
}
    
void PickupWheels::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new PickupWheelsTog());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void PickupWheels::Up(Joystick* button) {
	
	//if(limitSwitch1 -> Get() == 0 && limitSwitch2 -> Get() == 0 && limitSwitch3 -> == 0 && limitSwitch4 -> Get() == 0)
		{

			if (button -> GetRawButton(6))//forward
			{ 
				
				if (limitSwitch1 -> Get() == 0)
				{
					spike1 -> Set(Relay::kOff);
				}
				
				else
				{
					spike1 ->Set(Relay::kForward);
				}
				
				if (limitSwitch2 -> Get() == 0)
				{
					spike2 -> Set(Relay::kOff);
				}
				
				else
				{
					spike2 -> Set(Relay::kForward);
				}
			}
			
			else if (button -> GetRawButton(7))
			{ 
							
				if (limitSwitch3 -> Get() == 0)
				{
					spike1 -> Set(Relay::kOff);
					
				}
							
				else
				{
					spike1 ->Set(Relay::kReverse);
				
				}
							
				if (limitSwitch4 -> Get() == 0)
				{
					spike2 -> Set(Relay::kOff);
					
				}
							
				else
				{
					spike2 -> Set(Relay::kReverse);
					
				}
			}
			
			else 
			{
				spike1 -> Set(Relay::kOff);
				spike2 -> Set(Relay::kOff);
			}
				
		}
}

void PickupWheels::Pass(Joystick* stick)
{
	if(stick->GetRawButton(10))
	{
		topWheels ->Set(-.85);
	}
	
	else if(stick->GetRawButton(11))
	{
		topWheels -> Set(1);
	}
	
	else 
	{
		topWheels -> Set(0);
	}
}
	
void PickupWheels::Start()
{
	topWheels -> Set(1);
	spike1 -> Set(Relay::kOn);
	spike2 -> Set(Relay::kOn);
}

void PickupWheels::Stop()
{
	topWheels -> Set(0);
	spike1 -> Set(Relay::kOff);
	spike2 -> Set(Relay::kOff);
}	

void PickupWheels::wheelRun()
{
	topWheels ->Set(1);
}
