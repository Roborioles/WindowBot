// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Ballist.h"
#include "../Robotmap.h"
#include "../Commands/BallistTog.h"
#include "../OI.h"
Ballist::Ballist() : Subsystem("Ballist") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	speedController1 = RobotMap::ballistSpeedController1;
	speedController2 = RobotMap::ballistSpeedController2;
	speedController3 = RobotMap::ballistSpeedController3;
	speedController4 = RobotMap::ballistSpeedController4;
	
	limitSwitchBallist = RobotMap::ballistLimitSwitch1;
	limitSwitchArm = RobotMap::pickupWheelsLimitSwitch1;
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Ballist::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new BallistTog());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

void Ballist::Launch(Joystick* stick){
	if(stick->GetRawButton(1))
	{
		if(limitSwitchBallist->Get()==1)
		{
			speedController1->Set(-.1);
			speedController2->Set(-.1);
			speedController3->Set(-.1);
			speedController4->Set(-.1);
		}
		
		else
		{
			speedController1->Set(0);
			speedController2->Set(0);
			speedController3->Set(0);
			speedController4->Set(0);
		}
	}
	
	 
	else if(stick->GetRawButton(2))
	{
		if(limitSwitchArm->Get()==0)//0=pressed//was ==1
		{
			speedController1->Set(.5);
			speedController2->Set(.5);
			speedController3->Set(.5);
			speedController4->Set(.5);
		}
	}
	
	else 
	{
		speedController1->Set(0);
		speedController2->Set(0);
		speedController3->Set(0);
		speedController4->Set(0);
	}
}

void Ballist::Stop(){
	speedController1 -> Set(0);
}
